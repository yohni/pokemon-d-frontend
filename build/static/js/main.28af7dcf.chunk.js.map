{"version":3,"sources":["assets/twitter-logo.svg","constants/index.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","process","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","skillName","LoadingIndicator","className","SelectCharacter","setCharNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","PokemonD","abi","console","log","getCharacters","a","getAllDefaultCharacters","characterTxn","map","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","length","character","index","src","alt","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","setCharacterNFT","boss","setBoss","attackState","setAttackState","showToast","setShowToast","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","runAttackAction","attackBoss","attackTxn","setTimeout","id","value","max","App","currAccount","setCurrAccount","currChar","setCurrChar","isLoading","setIsLoading","checkWalletConnection","request","method","accounts","account","connectWalletAction","alert","checkNetwork","networkVersion","error","fetchNFTMetadata","provider","txn","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28af7dcf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","const CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS;\n\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n    skillName: characterData.skillName\n  };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import { ethers } from 'ethers';\nimport React, { useEffect, useState } from 'react';\nimport PokemonD from '../../utils/PokemonD.json';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport './SelectCharacter.css';\nimport LoadingIndicator from '../LoadingIndicator';\n\nconst SelectCharacter = ({ setCharNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      if (gameContract) {\n        setMintingCharacter(true);\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log('mintTxn', mintTxn);\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n      setMintingCharacter(false);\n    }\n  };\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        PokemonD.abi,\n        signer\n      );\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object non found');\n    }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint');\n        const characterTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn', characterTxn);\n        const characters = characterTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n        setCharacters(characters);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n\n    return () => {\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract, setCharNFT]);\n\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          onClick={mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;\n","import { ethers } from 'ethers';\nimport React, { useEffect, useState } from 'react';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport PokemonD from '../../utils/PokemonD.json';\nimport LoadingIndicator from '../LoadingIndicator';\nimport './Arena.css';\n\nexport const Arena = ({ characterNFT, setCharacterNFT }) => {\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState('');\n  const [showToast, setShowToast] = useState(false);\n\n  useEffect(() => {\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log('Boss: ', bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      const bossHp = newBossHp.toNumber();\n      const playerHp = newPlayerHp.toNumber();\n\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n      setBoss((prevState) => {\n        return { ...prevState, hp: bossHp };\n      });\n\n      setCharacterNFT((prevState) => {\n        return { ...prevState, hp: playerHp };\n      });\n    };\n\n    if (gameContract) {\n      fetchBoss();\n      gameContract.on('AttackComplete', onAttackComplete);\n    }\n\n    return () => {\n      if (gameContract) {\n        gameContract.off('AttackComplete', onAttackComplete);\n      }\n    };\n  }, [gameContract]);\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        PokemonD.abi,\n        signer\n      );\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState('attacking');\n        console.log('Attacking the boss...');\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log('attackTxn: ', attackTxn);\n        setAttackState('hit');\n\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.log('Error attacking boss: ', error);\n      setAttackState('');\n    }\n  };\n\n  return (\n    <div className=\"arena-container\">\n      {boss && characterNFT && (\n        <div id=\"toast\" className={showToast ? 'show' : ''}>\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n      {/* Boss */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n          {attackState === 'attacking' && (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Character NFT */}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;\n","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport PokemonD from './utils/PokemonD.json';\n\n// Constants\n\nconst App = () => {\n  const [currAccount, setCurrAccount] = useState(null);\n  const [currChar, setCurrChar] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const checkWalletConnection = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have metamask!');\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the etherium object', ethereum);\n\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('We found an authorized account:', account);\n          setCurrAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    setIsLoading(false);\n  };\n\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert('Get Metamask!');\n        return;\n      } else {\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        console.log('Connected account:', accounts[0]);\n        setCurrAccount(accounts[0]);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n    if (!currAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://media.giphy.com/media/cNlhpWYx5PGsOGXAil/giphy.gif\"\n            alt=\"Monty Python Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n    } else if (currAccount && !currChar) {\n      return <SelectCharacter setCharNFT={setCurrChar} />;\n    } else if (currAccount && currChar) {\n      return <Arena characterNFT={currChar} setCharacterNFT={setCurrChar} />;\n    }\n  };\n\n  useEffect(() => {\n    const checkNetwork = async () => {\n      try {\n        if (window.ethereum.networkVersion !== '4') {\n          alert('Please connect to Rinkeby!');\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    checkNetwork();\n    setIsLoading(true);\n    checkWalletConnection();\n  }, []);\n\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        PokemonD.abi,\n        signer\n      );\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCurrChar(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n\n      setIsLoading(false);\n    };\n\n    if (currAccount) {\n      console.log('Current Account:', currAccount);\n      fetchNFTMetadata();\n    }\n  }, [currAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Pokemon D</p>\n          <p className=\"sub-text\">Join the other trainer and beat the enemy!</p>\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <div className=\"footer-text\">&copy; mindy 2021</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}